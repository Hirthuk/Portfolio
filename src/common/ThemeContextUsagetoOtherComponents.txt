After creating the `ThemeContext` and setting up the `ThemeProvider` component, the next steps involve using this context in other components of your React application. Here's how you can do that:

### 1. **Wrap Your Application with `ThemeProvider`**
   - To provide the theme context to your entire app, you need to wrap your app's root component with `ThemeProvider`.
   - This ensures that any component within your app can access the theme and toggle function.

   ```javascript
   import React from 'react';
   import ReactDOM from 'react-dom';
   import App from './App'; // Your main App component
   import { ThemeProvider } from './ThemeProvider'; // Path to your ThemeProvider

   ReactDOM.render(
     <ThemeProvider>
       <App />
     </ThemeProvider>,
     document.getElementById('root')
   );
   ```

### 2. **Use the `useTheme` Hook in Your Components**
   - Now that `ThemeProvider` is wrapping your app, you can use the `useTheme` hook inside any component to access the current theme and the `toggleTheme` function.

   **Example Component:**
   ```javascript
   import React from 'react';
   import { useTheme } from './ThemeProvider'; // Path to your useTheme hook

   const ThemeSwitcher = () => {
     // Access the current theme and the toggle function
     const { theme, toggleTheme } = useTheme();

     return (
       <div>
         <p>Current Theme: {theme}</p>
         <button onClick={toggleTheme}>
           Toggle Theme
         </button>
       </div>
     );
   };

   export default ThemeSwitcher;
   ```

   **Explanation**:
   - **`useTheme` Hook**: This custom hook retrieves the `theme` and `toggleTheme` from the `ThemeContext` and makes them available to your component.
   - **Rendering Theme Info**: The current theme (`'light'` or `'dark'`) is displayed in a paragraph.
   - **Toggle Button**: A button is provided to switch between themes by calling `toggleTheme`.

### 3. **Use the Theme in Your CSS**
   - The theme is applied to the `body` element via the `data-theme` attribute, as set in the `useEffect` within `ThemeProvider`.
   - You can use this attribute in your CSS to apply different styles based on the theme.

   **Example CSS:**
   ```css
   /* Global styles */
   body[data-theme='light'] {
     background-color: white;
     color: black;
   }

   body[data-theme='dark'] {
     background-color: black;
     color: white;
   }
   ```

   **Explanation**:
   - The `body[data-theme='light']` and `body[data-theme='dark']` selectors target the `body` element and apply different styles depending on the current theme.
   - This allows you to easily change the entire appearance of your app based on the selected theme.

### 4. **Using the Theme in Other Components**
   - You can use the `useTheme` hook in any component where you need to access the current theme or toggle it.

   **Another Example:**
   ```javascript
   import React from 'react';
   import { useTheme } from './ThemeProvider';

   const Header = () => {
     const { theme } = useTheme();

     return (
       <header className={`header-${theme}`}>
         <h1>Welcome to My App</h1>
       </header>
     );
   };

   export default Header;
   ```

   **Explanation**:
   - The `Header` component uses the `theme` from the context to apply a CSS class (`header-light` or `header-dark`).
   - You can define different styles for these classes in your CSS to adjust the header's appearance based on the theme.

### Summary
1. **Wrap** your app with `ThemeProvider` to provide the theme context globally.
2. **Use** the `useTheme` hook in your components to access the current theme and toggle function.
3. **Apply** theme-specific styles in your CSS using the `data-theme` attribute or custom classes.
4. **Integrate** the theme in various components to create a consistent and dynamic user interface.