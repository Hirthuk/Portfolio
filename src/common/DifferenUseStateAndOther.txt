You're right that theme changes can indeed be handled by a simple button click and state change using `useState`. However, the approach you're using with `createContext`, `useContext`, and `useEffect` offers several advantages, especially in larger or more complex applications. Let’s explore why you might choose this "complex" method:

### 1. **Global State Management**
   - **Problem with Simple `useState`**: If you manage the theme with a simple `useState` within a single component, you'll need to pass the state and toggle function down to any child components that need it. This can become cumbersome if many components across different parts of your app need to know the current theme or have the ability to change it.
   - **Advantage of Context**: By using `createContext` and `useContext`, you can manage the theme at a higher level in your app and make it accessible to any component, no matter how deeply nested, without passing props. This makes your code cleaner and easier to maintain, especially as the app grows.

### 2. **Persistence Across Sessions**
   - **Problem with Simple `useState`**: If you use only `useState` and don't persist the theme in `localStorage` (or some other storage), the theme will reset every time the user reloads the page or reopens the app.
   - **Advantage of `useEffect`**: By using `useEffect`, you can ensure that the user's theme preference is saved to `localStorage` and automatically loaded when the app initializes. This provides a better user experience, as the app remembers the user’s preference.

### 3. **Separation of Concerns**
   - **Problem with Simple `useState`**: If you manage the theme state and the logic for applying it within individual components, the responsibilities of those components can become cluttered. They’ll be handling not only their specific UI concerns but also global app state and side effects.
   - **Advantage of Context and Hooks**: The `ThemeProvider` encapsulates all the logic related to theme management (state, side effects, and persistence) in one place. This keeps the rest of your components focused on their own responsibilities, making them simpler and easier to understand.

### 4. **Reusability and Scalability**
   - **Problem with Simple `useState`**: As your app grows, you might find yourself duplicating theme management logic across multiple components, leading to more code to maintain and a higher chance of bugs.
   - **Advantage of Context**: By encapsulating theme logic in a provider component and exposing it through a custom hook (`useTheme`), you make this functionality easily reusable. Any component in your app can access the theme and toggle function without additional boilerplate code.

### 5. **Consistency Across the App**
   - **Problem with Simple `useState`**: If different parts of your app manage the theme independently, there’s a risk of inconsistency, where different components might end up using different themes.
   - **Advantage of Context**: Using a single context ensures that all parts of your app share the same theme and that changes propagate consistently throughout the app.

### When to Use Simple `useState`
- If you’re building a small, simple app where only one or two components need to know about the theme, and you don’t need to persist the theme between sessions, then a simple `useState` and button click handler might be sufficient.
  
### When to Use Context and `useEffect`
- If your app is more complex, with many components needing access to the theme, or if you want to ensure a consistent and persistent user experience across sessions, the context-based approach is the better choice.

### Summary
While the context-based approach is more complex, it provides a more scalable, maintainable, and user-friendly solution, especially for larger applications. It might be overkill for a very simple app, but it pays off as your app grows in complexity.